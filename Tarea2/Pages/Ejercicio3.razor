@using System;
@page "/ejercicio3"


<div class="row justify-content-center ">
    <div class="col-10 alert alert-primary text-center">
        <h2>Ejercicio 3</h2>
        <p>Programa que acepte un numero de una cedula dominicana y determine si es valida. (Sin usar api).</p>
    </div>
</div>

<div class="row justify-content-center">
    <div class="card col-6">
      <h5 class="card-header">Validar Cedula de Identidad</h5>
      <div class="card-body">
        <input type="number" @bind-value="@cedula" max="9" maxlength="11" class="form-control mb-3">
        <button class="btn btn-success" @onclick="ValidaCedula">Validar</button>
        <button class="btn btn-danger" @onclick="limpiar">Limpiar</button>
      </div>
    </div>
</div>

@if(validacion == true && errores.Length <= 0){
    <div class="row justify-content-center mt-5">
        <div class="col-5 alert alert-success text-center">
            <h2>Validación Correcta!...</h2>
        </div>
    </div>
}

@if(errores.Length > 0){
    <div class="row justify-content-center mt-5">
        <div class="col-5 alert alert-danger text-center">
            <h2>Error</h2>
            <p>@errores</p>
        </div>
    </div>
}

@code{
    //Declaracion de la Varibles
    string cedula= "";
    string errores = "";
    bool validacion = false;
    //* Método o función para validar una cédula dominicana*
    public void ValidaCedula(){
        //Declaración de variables a nivel de método o función.
        errores = "";
        validacion = false;
        int verificador = 0;
        int digito = 0;
        int digitoVerificador=0;
        int digitoImpar = 0;
        int sumaPar = 0;
        int sumaImpar = 0;
        int longitud = Convert.ToInt32(cedula.Length);
        /*Control de errores en el código*/
        try
        {
            //verificamos que la longitud del parametro sea igual a 11
            if (longitud == 11)
            {
             digitoVerificador = Convert.ToInt32(cedula.Substring(10, 1));
               //recorremos en un ciclo for cada dígito de la cédula
               for (int i = 9; i >= 0; i--)
               {
                   //si el digito no es par multiplicamos por 2
                   digito = Convert.ToInt32(cedula.Substring(i, 1));
                   if ((i % 2) != 0)
                  {
                       digitoImpar = digito * 2;
                       //si el digito obtenido es mayor a 10, restamos 9
                       if (digitoImpar >= 10)
                       {
                           digitoImpar = digitoImpar - 9;
                       }
                       sumaImpar = sumaImpar + digitoImpar;
                   }
                   /*En los demás casos sumamos el dígito y lo aculamos 
                    en la variable */
                    else
                    {
                        sumaPar = sumaPar + digito;
                    }
                }
               /*Obtenemos el verificador restandole a 10 el modulo 10 
               de la suma total de los dígitos*/
               verificador = 10 - ((sumaPar + sumaImpar) % 10);
             /*si el verificador es igual a 10 y el dígito verificador
               es igual a cero o el verificador y el dígito verificador 
               son iguales retorna verdadero*/
          if (((verificador == 10) && (digitoVerificador == 0))
               || (verificador == digitoVerificador))
               {
                    validacion = true;
               }else{
                   errores = "Cedula Invalida!...";
               }
           }
           else
          {
           errores = "La cedula debe contener once(11) digitos";
          }
       }
      catch
       {
           errores += "No se pudo validar la cédula";
       }
    }
    public void limpiar(){
        errores = "";
        cedula = "";
        validacion = false;
    }
    
    
}